---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: redis
  namespace: a3c641-dev
  selfLink: /apis/template.openshift.io/v1/namespaces/a3c641-dev/templates/redis
  uid: f1e5088f-1ada-4a79-bd9a-0a4cace8a865
  resourceVersion: '892228629'
  creationTimestamp: '2021-04-23T00:27:59Z'
  annotations:
    description: |
      Deployment template for persistant redis
    iconClass: icon-node
  managedFields:
    - manager: Mozilla
      operation: Update
      apiVersion: template.openshift.io/v1
      time: '2021-04-23T00:27:59Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:description': {}
            'f:iconClass': {}
        'f:objects': {}
        'f:parameters': {}
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        app: redis
      name: '${DATABASE_SERVICE_NAME}'
    stringData:
      database-password: '${REDIS_PASSWORD}'
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: redis
      name: redis
    spec:
      path: ''
      port:
        targetPort: 6379-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: redis
        weight: 100
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: redis
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
      status:
        loadBalancer: null
      ports:
        - name: 6379-tcp
          port: 6379
          protocol: TCP
          targetPort: 6379
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: redis
      name: redis-pv-claim
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      volumeName: redis-db
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: redis
      name: redis
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - redis
            from:
              kind: ImageStreamTag
              name: 'redis:${REDIS_VERSION}'
              namespace: '${SOURCE_IMAGE_NAMESPACE}'
      replicas: 1
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      template:
        metadata:
          labels:
            app: redis
            role: redis
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          containers:
            - resources:
                limits:
                  cpu: 200m
                  memory: 512Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              readinessProbe:
                exec:
                  command:
                    - >-
                      bin/sh -i -c test "$(redis-cli -h 127.0.0.1 -a
                      $REDIS_PASSWORD ping)" == "PONG"
                initialDelaySeconds: 10
                timeoutSeconds: 2
              terminationMessagePath: /dev/termination-log
              name: redis
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 6379
                timeoutSeconds: 2
              env:
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: '${DATABASE_SERVICE_NAME}'
              securityContext:
                capabilities: null
                privileged: false
              ports:
                - containerPort: 6379
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - mountPath: /var/lib/redis/data
                  name: '${DATABASE_SERVICE_NAME}-db'
              image: ' '
          volumes:
            - name: '${DATABASE_SERVICE_NAME}-db'
              persistentVolumeClaim:
                claimName: '${DATABASE_SERVICE_NAME}'
parameters:
  - name: SOURCE_IMAGE_NAMESPACE
    displayName: Source Namespace
    description: |
      The namespace of the OpenShift project containing the imagestream for
      the application.
    value: openshift
  - name: REDIS_VERSION
    displayName: Redis Version
    description: Redis Version
    value: '5'
  - name: DATABASE_SERVICE_NAME
    displayName: Database Name
    description: Database Name
    value: redis
  - name: REDIS_PASSWORD
    displayName: Database Connection Password
    description: Database Connection Password
    required: true

